{"version":3,"sources":["Components/TextEditor.js","App.js","serviceWorker.js","index.js"],"names":["BLOCK_TAGS","blockquote","p","pre","MARK_TAGS","em","strong","u","code","del","rules","deserialize","el","next","type","tagName","toLowerCase","object","data","className","getAttribute","nodes","childNodes","serialize","obj","children","react_default","a","createElement","get","MarkHotkey","options","key","onKeyDown","event","editor","ctrlKey","preventDefault","toggleMark","plugins","html","Html","initialValue","localStorage","getItem","TextEditor","state","value","onChange","_ref","document","_this","string","setItem","setState","renderMark","props","mark","slate_react_es","this","React","Component","App","Components_TextEditor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc984921.chunk.js","sourcesContent":["// Import the `Value` model.\nimport React from 'react';\nimport { Editor } from 'slate-react'\nimport Html from 'slate-html-serializer'\n\n\nconst BLOCK_TAGS = {\n    blockquote: 'quote',\n    p: 'paragraph',\n    pre: 'code',\n  };\n  // Add a dictionary of mark tags.\n  const MARK_TAGS = {\n    em: 'italic',\n    strong: 'bold',\n    u: 'underline',\n    code: 'code',\n    del: 'strikethrough'\n  };\n  const rules = [\n    {\n      deserialize(el, next) {\n        const type = BLOCK_TAGS[el.tagName.toLowerCase()]\n        if (type) {\n          return {\n            object: 'block',\n            type: type,\n            data: {\n              className: el.getAttribute('class'),\n            },\n            nodes: next(el.childNodes),\n          }\n        }\n      },\n      serialize(obj, children) {\n        if (obj.object === 'block') {\n          switch (obj.type) {\n            case 'code':\n              return (\n                <pre>\n                  <code>{children}</code>\n                </pre>\n              )\n            case 'paragraph':\n              return <p className={obj.data.get('className')}>{children}</p>\n            case 'quote':\n              return <blockquote>{children}</blockquote>\n          }\n        }\n      },\n    },\n    // Add a new rule that handles marks...\n    {\n      deserialize(el, next) {\n        const type = MARK_TAGS[el.tagName.toLowerCase()]\n        if (type) {\n          return {\n            object: 'mark',\n            type: type,\n            nodes: next(el.childNodes),\n          }\n        }\n      },\n      serialize(obj, children) {\n        if (obj.object == 'mark') {\n          switch (obj.type) {\n            case 'bold':\n              return <strong>{children}</strong>\n            case 'italic':\n              return <em>{children}</em>\n            case 'underline':\n              return <u>{children}</u>\n            case 'code':\n              return <code>{children}</code>\n            case 'strikethrough':\n              return <del>{children}</del>\n          }\n        }\n      },\n    },\n  ];\n\n\n\nfunction MarkHotkey(options) {\n    const { type, key } = options\n    // Return our \"plugin\" object, containing the `onKeyDown` handler.\nreturn {\n    onKeyDown: (event, editor, next) => {\n        // If it doesn't match our `key`, let other plugins handle it.\n        debugger;\n        if (!event.ctrlKey || event.key !== key) {return next();}\n        // Prevent the default characters from being inserted.\n        event.preventDefault();\n        // Toggle the mark `type`.\n        editor.toggleMark(type);\n        return next();\n    },\n    }\n};\n// Create an array of plugins.\nconst plugins = [\n    MarkHotkey({ key: 'b', type: 'bold' }),\n    MarkHotkey({ key: '`', type: 'code' }),\n    MarkHotkey({ key: 'i', type: 'italic' }),\n    MarkHotkey({ key: '-', type: 'strikethrough' }),\n    MarkHotkey({ key: 'u', type: 'underline' }),\n    ];\n\n\n    const html = new Html({ rules })\n\nconst initialValue = localStorage.getItem('content') || '<p></p>'\n\n\nclass TextEditor extends React.Component {\n    // Set the initial value when the app is first constructed.\n    state = {\n        value: html.deserialize(initialValue),\n    }\n    // On change, update the app's React state with the new editor value.\n    onChange = ({ value }) => {\n        if (value.document !== this.state.value.document) {\n            const string = html.serialize(value)\n            localStorage.setItem('content', string)\n          }\n        this.setState({ value })\n    };\n\n  // Add a `renderMark` method to render marks.\nrenderMark = (props, editor, next) => {\n        switch (props.mark.type) {\n            case 'bold':\n            return <strong>{props.children}</strong>\n        // Add our new mark renderers...\n        case 'code':\n            return <code>{props.children}</code>\n        case 'italic':\n            return <em>{props.children}</em>\n        case 'strikethrough':\n            return <del>{props.children}</del>\n        case 'underline':\n            return <u>{props.children}</u>\n        default:\n            return next()\n        }\n    }\n  \n\n    // Render the editor.\n    render(){\n        return (\n        <Editor \n            plugins={plugins}\n            value={this.state.value} \n            onChange={this.onChange}\n            renderMark={this.renderMark} />)\n    }\n}\n\n\n  export default TextEditor;","import React, { Component } from 'react';\nimport TextEditor from './Components/TextEditor';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TextEditor />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}